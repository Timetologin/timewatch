{"ast":null,"code":"// client/src/api.js\n// Robust API base detection:\n// - REACT_APP_API_URL (if set) wins\n// - Dev: if app runs on :3000 -> talk to backend on :4000\n// - Prod: same-origin (empty base)\nconst explicit = (process.env.REACT_APP_API_URL || '').trim().replace(/\\/+$/, '');\nlet BASE = explicit;\nif (!BASE) {\n  const {\n    protocol,\n    hostname,\n    port\n  } = window.location;\n  if (port === '3000') {\n    BASE = `${protocol}//${hostname}:4000`;\n  } else {\n    BASE = ''; // same-origin (reverse proxy / prod)\n  }\n}\nexport const API_BASE = BASE;\nfunction getToken() {\n  try {\n    const auth = JSON.parse(localStorage.getItem('auth') || '{}');\n    return (auth === null || auth === void 0 ? void 0 : auth.token) || localStorage.getItem('token') || '';\n  } catch {\n    return localStorage.getItem('token') || '';\n  }\n}\nexport async function api(path, options = {}) {\n  const token = getToken();\n  const url = `${API_BASE}${path}`;\n  const res = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      ...(token ? {\n        Authorization: `Bearer ${token}`\n      } : {})\n    },\n    ...options\n  });\n\n  // Try to parse JSON, but be tolerant to non-JSON error bodies\n  let data = {};\n  const text = await res.text();\n  try {\n    data = text ? JSON.parse(text) : {};\n  } catch {\n    data = {\n      message: text || ''\n    };\n  }\n  if (!res.ok) {\n    var _data;\n    const msg = ((_data = data) === null || _data === void 0 ? void 0 : _data.message) || res.statusText || 'Request failed';\n    throw new Error(msg);\n  }\n  return data;\n}","map":{"version":3,"names":["explicit","process","env","REACT_APP_API_URL","trim","replace","BASE","protocol","hostname","port","window","location","API_BASE","getToken","auth","JSON","parse","localStorage","getItem","token","api","path","options","url","res","fetch","method","headers","Authorization","data","text","message","ok","_data","msg","statusText","Error"],"sources":["C:/Users/user/Desktop/timewatch-clone/client/src/api.js"],"sourcesContent":["// client/src/api.js\r\n// Robust API base detection:\r\n// - REACT_APP_API_URL (if set) wins\r\n// - Dev: if app runs on :3000 -> talk to backend on :4000\r\n// - Prod: same-origin (empty base)\r\nconst explicit = (process.env.REACT_APP_API_URL || '').trim().replace(/\\/+$/, '');\r\nlet BASE = explicit;\r\nif (!BASE) {\r\n  const { protocol, hostname, port } = window.location;\r\n  if (port === '3000') {\r\n    BASE = `${protocol}//${hostname}:4000`;\r\n  } else {\r\n    BASE = ''; // same-origin (reverse proxy / prod)\r\n  }\r\n}\r\n\r\nexport const API_BASE = BASE;\r\n\r\nfunction getToken() {\r\n  try {\r\n    const auth = JSON.parse(localStorage.getItem('auth') || '{}');\r\n    return auth?.token || localStorage.getItem('token') || '';\r\n  } catch {\r\n    return localStorage.getItem('token') || '';\r\n  }\r\n}\r\n\r\nexport async function api(path, options = {}) {\r\n  const token = getToken();\r\n  const url = `${API_BASE}${path}`;\r\n\r\n  const res = await fetch(url, {\r\n    method: 'GET',\r\n    headers: {\r\n      'Content-Type': 'application/json',\r\n      ...(token ? { Authorization: `Bearer ${token}` } : {}),\r\n    },\r\n    ...options,\r\n  });\r\n\r\n  // Try to parse JSON, but be tolerant to non-JSON error bodies\r\n  let data = {};\r\n  const text = await res.text();\r\n  try { data = text ? JSON.parse(text) : {}; } catch { data = { message: text || '' }; }\r\n\r\n  if (!res.ok) {\r\n    const msg = data?.message || res.statusText || 'Request failed';\r\n    throw new Error(msg);\r\n  }\r\n  return data;\r\n}\r\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,GAAG,CAACC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,EAAE,EAAEC,IAAI,CAAC,CAAC,CAACC,OAAO,CAAC,MAAM,EAAE,EAAE,CAAC;AACjF,IAAIC,IAAI,GAAGN,QAAQ;AACnB,IAAI,CAACM,IAAI,EAAE;EACT,MAAM;IAAEC,QAAQ;IAAEC,QAAQ;IAAEC;EAAK,CAAC,GAAGC,MAAM,CAACC,QAAQ;EACpD,IAAIF,IAAI,KAAK,MAAM,EAAE;IACnBH,IAAI,GAAG,GAAGC,QAAQ,KAAKC,QAAQ,OAAO;EACxC,CAAC,MAAM;IACLF,IAAI,GAAG,EAAE,CAAC,CAAC;EACb;AACF;AAEA,OAAO,MAAMM,QAAQ,GAAGN,IAAI;AAE5B,SAASO,QAAQA,CAAA,EAAG;EAClB,IAAI;IACF,MAAMC,IAAI,GAAGC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC;IAC7D,OAAO,CAAAJ,IAAI,aAAJA,IAAI,uBAAJA,IAAI,CAAEK,KAAK,KAAIF,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC3D,CAAC,CAAC,MAAM;IACN,OAAOD,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,IAAI,EAAE;EAC5C;AACF;AAEA,OAAO,eAAeE,GAAGA,CAACC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,EAAE;EAC5C,MAAMH,KAAK,GAAGN,QAAQ,CAAC,CAAC;EACxB,MAAMU,GAAG,GAAG,GAAGX,QAAQ,GAAGS,IAAI,EAAE;EAEhC,MAAMG,GAAG,GAAG,MAAMC,KAAK,CAACF,GAAG,EAAE;IAC3BG,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,IAAIR,KAAK,GAAG;QAAES,aAAa,EAAE,UAAUT,KAAK;MAAG,CAAC,GAAG,CAAC,CAAC;IACvD,CAAC;IACD,GAAGG;EACL,CAAC,CAAC;;EAEF;EACA,IAAIO,IAAI,GAAG,CAAC,CAAC;EACb,MAAMC,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAI,CAAC,CAAC;EAC7B,IAAI;IAAED,IAAI,GAAGC,IAAI,GAAGf,IAAI,CAACC,KAAK,CAACc,IAAI,CAAC,GAAG,CAAC,CAAC;EAAE,CAAC,CAAC,MAAM;IAAED,IAAI,GAAG;MAAEE,OAAO,EAAED,IAAI,IAAI;IAAG,CAAC;EAAE;EAErF,IAAI,CAACN,GAAG,CAACQ,EAAE,EAAE;IAAA,IAAAC,KAAA;IACX,MAAMC,GAAG,GAAG,EAAAD,KAAA,GAAAJ,IAAI,cAAAI,KAAA,uBAAJA,KAAA,CAAMF,OAAO,KAAIP,GAAG,CAACW,UAAU,IAAI,gBAAgB;IAC/D,MAAM,IAAIC,KAAK,CAACF,GAAG,CAAC;EACtB;EACA,OAAOL,IAAI;AACb","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}